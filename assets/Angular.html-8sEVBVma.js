import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,e as o,o as t}from"./app-BP2kFEA4.js";const l={};function a(i,e){return t(),r("div",null,e[0]||(e[0]=[o('<h1 id="angular-框架知识点笔记" tabindex="-1"><a class="header-anchor" href="#angular-框架知识点笔记"><span>Angular 框架知识点笔记</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Angular 是一个开源的前端框架，由 Google 维护，主要用于构建单页应用（SPA）。Angular 提供了一种结构化的方式来开发动态的 Web 应用，利用 TypeScript 作为主要编程语言，结合组件和依赖注入等概念，提供强大的工具集来简化开发过程。</p><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><h3 id="_1-模块-modules" tabindex="-1"><a class="header-anchor" href="#_1-模块-modules"><span>1. 模块（Modules）</span></a></h3><ul><li><p><strong>定义</strong><br> 模块是 Angular 应用的基本构建块。每个模块封装了一组相关的功能和组件。通过模块，开发者可以将应用分割成更小的、可重用的部分。</p></li><li><p><strong>根模块</strong><br> 每个 Angular 应用至少有一个根模块，通常是 <code>AppModule</code>。它是应用的启动点，定义了应用的根组件和引导程序。</p></li><li><p><strong>特性模块</strong><br> 特性模块用于组织和管理特定的功能区域，比如用户模块、产品模块等。</p></li></ul><h3 id="_2-组件-components" tabindex="-1"><a class="header-anchor" href="#_2-组件-components"><span>2. 组件（Components）</span></a></h3><ul><li><p><strong>定义</strong><br> 组件是 Angular 应用的基本 UI 单元，负责定义视图和处理逻辑。每个组件由一个模板（HTML）、一个样式表（CSS）和一个 TypeScript 类组成。</p></li><li><p><strong>创建组件</strong><br> 使用 Angular CLI 命令 <code>ng generate component &lt;组件名&gt;</code> 来生成新的组件。</p></li><li><p><strong>装饰器</strong><br><code>@Component</code> 装饰器用于定义组件的元数据，包括选择器、模板和样式。</p></li></ul><h3 id="_3-模板-templates" tabindex="-1"><a class="header-anchor" href="#_3-模板-templates"><span>3. 模板（Templates）</span></a></h3><ul><li><p><strong>定义</strong><br> 模板是 Angular 组件的视图部分，使用 HTML 和 Angular 特有的模板语法来定义界面布局。</p></li><li><p><strong>数据绑定</strong></p><ul><li><strong>插值表达式</strong>：<code>{{ expression }}</code><br> 在模板中显示数据的值。</li><li><strong>属性绑定</strong>：<code>[property]=&quot;expression&quot;</code><br> 绑定组件属性到 DOM 元素的属性。</li><li><strong>事件绑定</strong>：<code>(event)=&quot;handler($event)&quot;</code><br> 绑定 DOM 事件到组件方法。</li><li><strong>双向绑定</strong>：<code>[(ngModel)]=&quot;property&quot;</code><br> 同步组件属性和输入元素的值。</li></ul></li></ul><h3 id="_4-服务与依赖注入-services-dependency-injection" tabindex="-1"><a class="header-anchor" href="#_4-服务与依赖注入-services-dependency-injection"><span>4. 服务与依赖注入（Services &amp; Dependency Injection）</span></a></h3><ul><li><p><strong>服务</strong><br> 服务是用于组织和共享代码的单例类，通常用于处理业务逻辑和数据访问。通过注入服务，组件可以访问和使用这些功能。</p></li><li><p><strong>依赖注入</strong><br> Angular 的依赖注入系统允许将服务或其他依赖项注入到组件或其他服务中。使用 <code>@Injectable</code> 装饰器定义服务，并在模块中进行提供。</p></li></ul><h3 id="_5-路由-routing" tabindex="-1"><a class="header-anchor" href="#_5-路由-routing"><span>5. 路由（Routing）</span></a></h3><ul><li><p><strong>定义</strong><br> 路由用于在应用中导航不同的视图或组件。通过配置路由，Angular 可以根据 URL 显示不同的组件视图。</p></li><li><p><strong>配置</strong><br> 使用 <code>RouterModule.forRoot(routes)</code> 在根模块中配置路由，其中 <code>routes</code> 是路由配置数组，定义 URL 路径和组件的映射关系。</p></li><li><p><strong>路由守卫</strong><br> 路由守卫用于控制导航流程，例如认证和授权，确保用户访问受限页面前满足特定条件。</p></li></ul><h3 id="_6-表单-forms" tabindex="-1"><a class="header-anchor" href="#_6-表单-forms"><span>6. 表单（Forms）</span></a></h3><ul><li><p><strong>模板驱动表单</strong><br> 简单的表单，使用 Angular 的模板语法进行双向数据绑定。适合简单的表单处理。</p></li><li><p><strong>响应式表单</strong><br> 更复杂的表单，使用 <code>FormControl</code> 和 <code>FormGroup</code> 创建和管理表单模型。提供更好的可控性和灵活性。</p></li></ul><h3 id="_7-生命周期钩子-lifecycle-hooks" tabindex="-1"><a class="header-anchor" href="#_7-生命周期钩子-lifecycle-hooks"><span>7. 生命周期钩子（Lifecycle Hooks）</span></a></h3><ul><li><p><strong>定义</strong><br> 生命周期钩子是 Angular 提供的一组方法，用于在组件或指令的不同生命周期阶段执行特定操作。</p></li><li><p><strong>常用钩子</strong></p><ul><li><code>ngOnInit()</code>：初始化组件或指令。</li><li><code>ngOnChanges(changes: SimpleChanges)</code>：检测输入属性的变化。</li><li><code>ngOnDestroy()</code>：清理工作，销毁组件或指令。</li></ul></li></ul><h3 id="_8-指令-directives" tabindex="-1"><a class="header-anchor" href="#_8-指令-directives"><span>8. 指令（Directives）</span></a></h3><ul><li><p><strong>定义</strong><br> 指令用于操作 DOM 元素，改变其行为或外观。分为结构型指令和属性型指令。</p></li><li><p><strong>结构型指令</strong><br> 改变 DOM 结构，例如 <code>*ngIf</code> 和 <code>*ngFor</code>。</p></li><li><p><strong>属性型指令</strong><br> 修改元素的外观或行为，例如 <code>ngClass</code> 和 <code>ngStyle</code>。</p></li></ul><h3 id="_9-管道-pipes" tabindex="-1"><a class="header-anchor" href="#_9-管道-pipes"><span>9. 管道（Pipes）</span></a></h3><ul><li><p><strong>定义</strong><br> 管道用于格式化数据。通过管道，可以在模板中转换数据，例如格式化日期或货币。</p></li><li><p><strong>常用管道</strong></p><ul><li><code>DatePipe</code>：格式化日期。</li><li><code>CurrencyPipe</code>：格式化货币。</li><li><code>DecimalPipe</code>：格式化数字。</li></ul></li></ul><h3 id="_10-http-客户端-httpclient" tabindex="-1"><a class="header-anchor" href="#_10-http-客户端-httpclient"><span>10. HTTP 客户端（HttpClient）</span></a></h3><ul><li><p><strong>定义</strong><br><code>HttpClient</code> 是 Angular 提供的用于发送 HTTP 请求和处理响应的服务。</p></li><li><p><strong>使用</strong><br> 注入 <code>HttpClient</code> 服务，并使用 <code>get()</code>, <code>post()</code>, <code>put()</code>, <code>delete()</code> 等方法发起请求。</p></li><li><p><strong>拦截器</strong><br> 使用 HTTP 拦截器处理请求和响应，例如添加认证令牌或处理错误。</p></li></ul><h2 id="常用-angular-cli-命令" tabindex="-1"><a class="header-anchor" href="#常用-angular-cli-命令"><span>常用 Angular CLI 命令</span></a></h2><ul><li><p><strong>创建新 Angular 应用</strong><br><code>ng new &lt;应用名&gt;</code><br> 创建一个新的 Angular 项目。</p></li><li><p><strong>生成组件</strong><br><code>ng generate component &lt;组件名&gt;</code><br> 生成新的组件。</p></li><li><p><strong>生成服务</strong><br><code>ng generate service &lt;服务名&gt;</code><br> 生成新的服务。</p></li><li><p><strong>启动开发服务器</strong><br><code>ng serve</code><br> 启动本地开发服务器，并在浏览器中预览应用。</p></li><li><p><strong>构建生产版本</strong><br><code>ng build --prod</code><br> 构建优化过的生产版本，准备部署。</p></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://angular.io/docs" target="_blank" rel="noopener noreferrer">Angular 官方文档</a></li><li><a href="https://github.com/angular/angular" target="_blank" rel="noopener noreferrer">Angular GitHub 仓库</a></li><li><a href="https://angular.io/cli" target="_blank" rel="noopener noreferrer">Angular CLI 官方文档</a></li></ul>',28)]))}const c=n(l,[["render",a]]),g=JSON.parse('{"path":"/notes/fontend/Angular.html","title":"Angular","lang":"zh-CN","frontmatter":{"title":"Angular","icon":"pen-to-square","date":"2024-08-03T00:00:00.000Z","category":["前端"],"tag":["框架"],"description":"Angular 框架知识点笔记 概述 Angular 是一个开源的前端框架，由 Google 维护，主要用于构建单页应用（SPA）。Angular 提供了一种结构化的方式来开发动态的 Web 应用，利用 TypeScript 作为主要编程语言，结合组件和依赖注入等概念，提供强大的工具集来简化开发过程。 核心概念 1. 模块（Modules） 定义 模块...","head":[["meta",{"property":"og:url","content":"https://misyakuji.github.io/blog/notes/fontend/Angular.html"}],["meta",{"property":"og:site_name","content":"夕的博客"}],["meta",{"property":"og:title","content":"Angular"}],["meta",{"property":"og:description","content":"Angular 框架知识点笔记 概述 Angular 是一个开源的前端框架，由 Google 维护，主要用于构建单页应用（SPA）。Angular 提供了一种结构化的方式来开发动态的 Web 应用，利用 TypeScript 作为主要编程语言，结合组件和依赖注入等概念，提供强大的工具集来简化开发过程。 核心概念 1. 模块（Modules） 定义 模块..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T18:51:22.000Z"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:published_time","content":"2024-08-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T18:51:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Angular\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T18:51:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Misyakuji\\",\\"url\\":\\"https://blog.misyakuji.top\\"}]}"]]},"git":{"createdTime":1732992682000,"updatedTime":1732992682000,"contributors":[{"name":"Misyakuji","username":"Misyakuji","email":"2810013347@qq.com","commits":1,"url":"https://github.com/Misyakuji"}]},"readingTime":{"minutes":4.03,"words":1209},"filePathRelative":"notes/fontend/Angular.md","localizedDate":"2024年8月3日","excerpt":"\\n<h2>概述</h2>\\n<p>Angular 是一个开源的前端框架，由 Google 维护，主要用于构建单页应用（SPA）。Angular 提供了一种结构化的方式来开发动态的 Web 应用，利用 TypeScript 作为主要编程语言，结合组件和依赖注入等概念，提供强大的工具集来简化开发过程。</p>\\n<h2>核心概念</h2>\\n<h3>1. 模块（Modules）</h3>\\n<ul>\\n<li>\\n<p><strong>定义</strong><br>\\n模块是 Angular 应用的基本构建块。每个模块封装了一组相关的功能和组件。通过模块，开发者可以将应用分割成更小的、可重用的部分。</p>\\n</li>\\n<li>\\n<p><strong>根模块</strong><br>\\n每个 Angular 应用至少有一个根模块，通常是 <code>AppModule</code>。它是应用的启动点，定义了应用的根组件和引导程序。</p>\\n</li>\\n<li>\\n<p><strong>特性模块</strong><br>\\n特性模块用于组织和管理特定的功能区域，比如用户模块、产品模块等。</p>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,g as data};
