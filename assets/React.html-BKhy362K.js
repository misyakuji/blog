import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as r,o as n}from"./app-BP2kFEA4.js";const o={};function s(l,t){return n(),a("div",null,t[0]||(t[0]=[r('<h1 id="react-框架知识点笔记" tabindex="-1"><a class="header-anchor" href="#react-框架知识点笔记"><span>React 框架知识点笔记</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>React 是由 Facebook 开发和维护的开源 JavaScript 库，主要用于构建用户界面，尤其是单页应用（SPA）。React 通过组件化的方式简化了 UI 的开发，并通过虚拟 DOM 提升了性能。React 主要利用函数式编程和声明式编程的理念，使得开发者能够更高效地构建动态的、响应式的用户界面。</p><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><h3 id="_1-组件-components" tabindex="-1"><a class="header-anchor" href="#_1-组件-components"><span>1. 组件（Components）</span></a></h3><ul><li><p><strong>定义</strong><br> 组件是 React 的基本构建块，每个组件封装了 UI 和业务逻辑。组件可以是类组件或函数组件。类组件用于处理复杂的逻辑和生命周期，而函数组件适用于更简单的逻辑，通常与 React Hooks 一起使用。</p></li><li><p><strong>特点</strong></p><ul><li><strong>可重用性</strong>：组件是可重用的，可以在不同的地方使用。</li><li><strong>封装性</strong>：组件内部的状态和行为被封装，不会影响外部。</li><li><strong>组合性</strong>：组件可以嵌套和组合，构建复杂的界面。</li></ul></li></ul><h3 id="_2-jsx" tabindex="-1"><a class="header-anchor" href="#_2-jsx"><span>2. JSX</span></a></h3><ul><li><p><strong>定义</strong><br> JSX 是一种 JavaScript 语法扩展，使得在 JavaScript 中写 HTML 变得更加直观。它允许在 JavaScript 代码中嵌入 HTML 结构，并且与 JavaScript 逻辑紧密集成。</p></li><li><p><strong>特点</strong></p><ul><li><strong>声明性</strong>：使用类似 HTML 的语法描述 UI 结构，易于阅读和理解。</li><li><strong>嵌入逻辑</strong>：可以直接在 JSX 中嵌入 JavaScript 表达式和逻辑。</li></ul></li></ul><h3 id="_3-虚拟-dom" tabindex="-1"><a class="header-anchor" href="#_3-虚拟-dom"><span>3. 虚拟 DOM</span></a></h3><ul><li><p><strong>定义</strong><br> 虚拟 DOM 是 React 的核心优化技术，通过在内存中创建一个轻量级的虚拟表示，React 可以在实际 DOM 上做最小的更新，从而提高性能。</p></li><li><p><strong>特点</strong></p><ul><li><strong>高效更新</strong>：通过比较虚拟 DOM 和实际 DOM 的差异，进行高效的局部更新。</li><li><strong>减少重绘</strong>：减少了与实际 DOM 的交互次数，提升渲染性能。</li></ul></li></ul><h3 id="_4-状态管理-state" tabindex="-1"><a class="header-anchor" href="#_4-状态管理-state"><span>4. 状态管理（State）</span></a></h3><ul><li><p><strong>定义</strong><br> 状态用于存储和管理组件的动态数据。状态的变化会导致组件重新渲染。</p></li><li><p><strong>特点</strong></p><ul><li><strong>局部状态</strong>：状态通常是组件内部的局部数据。</li><li><strong>响应式</strong>：状态变化会自动触发组件的更新和重新渲染。</li></ul></li></ul><h3 id="_5-属性-props" tabindex="-1"><a class="header-anchor" href="#_5-属性-props"><span>5. 属性（Props）</span></a></h3><ul><li><p><strong>定义</strong><br> 属性（Props）是从父组件传递到子组件的数据，用于配置组件的行为和渲染内容。</p></li><li><p><strong>特点</strong></p><ul><li><strong>不可变性</strong>：Props 是只读的，子组件不能修改父组件传递过来的 props。</li><li><strong>传递数据</strong>：用于在组件间传递数据和回调函数。</li></ul></li></ul><h3 id="_6-生命周期方法-lifecycle-methods" tabindex="-1"><a class="header-anchor" href="#_6-生命周期方法-lifecycle-methods"><span>6. 生命周期方法（Lifecycle Methods）</span></a></h3><ul><li><p><strong>定义</strong><br> 生命周期方法是类组件的一部分，用于在组件的不同生命周期阶段执行特定操作，例如初始化、更新或卸载。</p></li><li><p><strong>特点</strong></p><ul><li><strong>挂载</strong>：组件创建和插入到 DOM 时调用。</li><li><strong>更新</strong>：组件接收新属性或状态更新时调用。</li><li><strong>卸载</strong>：组件从 DOM 中移除时调用。</li></ul></li></ul><h3 id="_7-react-hooks" tabindex="-1"><a class="header-anchor" href="#_7-react-hooks"><span>7. React Hooks</span></a></h3><ul><li><p><strong>定义</strong><br> Hooks 是 React 16.8 引入的特性，允许在函数组件中使用状态和其他 React 特性，而无需使用类组件。</p></li><li><p><strong>特点</strong></p><ul><li><strong><code>useState</code></strong>：用于在函数组件中管理状态。</li><li><strong><code>useEffect</code></strong>：用于处理副作用，例如数据获取和订阅。</li><li><strong><code>useContext</code></strong>：用于访问上下文数据，简化了状态管理。</li></ul></li></ul><h3 id="_8-上下文-context" tabindex="-1"><a class="header-anchor" href="#_8-上下文-context"><span>8. 上下文（Context）</span></a></h3><ul><li><p><strong>定义</strong><br> 上下文提供了一种在组件树中传递数据的方式，而无需逐层传递属性。适用于跨多个组件共享全局数据，如主题或用户信息。</p></li><li><p><strong>特点</strong></p><ul><li><strong>简化数据传递</strong>：避免了层层传递 props 的繁琐。</li><li><strong>集中管理</strong>：适用于全局状态管理和主题配置。</li></ul></li></ul><h3 id="_9-条件渲染与列表渲染" tabindex="-1"><a class="header-anchor" href="#_9-条件渲染与列表渲染"><span>9. 条件渲染与列表渲染</span></a></h3><ul><li><p><strong>条件渲染</strong><br> 根据某些条件渲染不同的 UI 元素或组件。</p></li><li><p><strong>列表渲染</strong><br> 使用 <code>map</code> 方法从数组中生成列表项，适合动态生成 UI 组件。</p></li></ul><h3 id="_10-事件处理-event-handling" tabindex="-1"><a class="header-anchor" href="#_10-事件处理-event-handling"><span>10. 事件处理（Event Handling）</span></a></h3><ul><li><p><strong>定义</strong><br> 事件处理用于响应用户交互，例如点击、输入等。React 使用合成事件系统，提供了统一的事件处理接口。</p></li><li><p><strong>特点</strong></p><ul><li><strong>合成事件</strong>：React 的事件处理系统是跨浏览器兼容的。</li><li><strong>事件绑定</strong>：可以直接将事件处理函数绑定到组件的事件属性上，如 <code>onClick</code>。</li></ul></li></ul><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2><ul><li><p><strong>创建新 React 应用</strong><br><code>npx create-react-app &lt;应用名&gt;</code><br> 用于初始化一个新的 React 项目。</p></li><li><p><strong>启动开发服务器</strong><br><code>npm start</code><br> 启动本地开发服务器，预览应用。</p></li><li><p><strong>构建生产版本</strong><br><code>npm run build</code><br> 构建优化过的生产版本，准备部署。</p></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://reactjs.org/docs/getting-started.html" target="_blank" rel="noopener noreferrer">React 官方文档</a></li><li><a href="https://github.com/facebook/react" target="_blank" rel="noopener noreferrer">React GitHub 仓库</a></li><li><a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener noreferrer">React Hook 文档</a></li></ul>',28)]))}const p=e(o,[["render",s]]),g=JSON.parse('{"path":"/notes/fontend/React.html","title":"React","lang":"zh-CN","frontmatter":{"title":"React","icon":"pen-to-square","date":"2024-08-03T00:00:00.000Z","category":["前端"],"tag":["框架"],"description":"React 框架知识点笔记 概述 React 是由 Facebook 开发和维护的开源 JavaScript 库，主要用于构建用户界面，尤其是单页应用（SPA）。React 通过组件化的方式简化了 UI 的开发，并通过虚拟 DOM 提升了性能。React 主要利用函数式编程和声明式编程的理念，使得开发者能够更高效地构建动态的、响应式的用户界面。 核心概...","head":[["meta",{"property":"og:url","content":"https://misyakuji.github.io/blog/notes/fontend/React.html"}],["meta",{"property":"og:site_name","content":"夕的博客"}],["meta",{"property":"og:title","content":"React"}],["meta",{"property":"og:description","content":"React 框架知识点笔记 概述 React 是由 Facebook 开发和维护的开源 JavaScript 库，主要用于构建用户界面，尤其是单页应用（SPA）。React 通过组件化的方式简化了 UI 的开发，并通过虚拟 DOM 提升了性能。React 主要利用函数式编程和声明式编程的理念，使得开发者能够更高效地构建动态的、响应式的用户界面。 核心概..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T18:51:22.000Z"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:published_time","content":"2024-08-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T18:51:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T18:51:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Misyakuji\\",\\"url\\":\\"https://blog.misyakuji.top\\"}]}"]]},"git":{"createdTime":1732992682000,"updatedTime":1732992682000,"contributors":[{"name":"Misyakuji","username":"Misyakuji","email":"2810013347@qq.com","commits":1,"url":"https://github.com/Misyakuji"}]},"readingTime":{"minutes":3.94,"words":1182},"filePathRelative":"notes/fontend/React.md","localizedDate":"2024年8月3日","excerpt":"\\n<h2>概述</h2>\\n<p>React 是由 Facebook 开发和维护的开源 JavaScript 库，主要用于构建用户界面，尤其是单页应用（SPA）。React 通过组件化的方式简化了 UI 的开发，并通过虚拟 DOM 提升了性能。React 主要利用函数式编程和声明式编程的理念，使得开发者能够更高效地构建动态的、响应式的用户界面。</p>\\n<h2>核心概念</h2>\\n<h3>1. 组件（Components）</h3>\\n<ul>\\n<li>\\n<p><strong>定义</strong><br>\\n组件是 React 的基本构建块，每个组件封装了 UI 和业务逻辑。组件可以是类组件或函数组件。类组件用于处理复杂的逻辑和生命周期，而函数组件适用于更简单的逻辑，通常与 React Hooks 一起使用。</p>\\n</li>\\n<li>\\n<p><strong>特点</strong></p>\\n<ul>\\n<li><strong>可重用性</strong>：组件是可重用的，可以在不同的地方使用。</li>\\n<li><strong>封装性</strong>：组件内部的状态和行为被封装，不会影响外部。</li>\\n<li><strong>组合性</strong>：组件可以嵌套和组合，构建复杂的界面。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{p as comp,g as data};
