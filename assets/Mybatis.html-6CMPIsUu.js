import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,e,o as i}from"./app-BP2kFEA4.js";const n={};function o(r,a){return i(),t("div",null,a[0]||(a[0]=[e('<h1 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis"><span>MyBatis</span></a></h1><p>MyBatis 是一个流行的持久层框架，用于简化 Java 应用程序与数据库之间的交互。它通过提供映射 SQL 语句到 Java 对象的功能，简化了数据访问的操作。以下是 MyBatis 的一些基础和重要知识点：</p><h2 id="_1-什么是-mybatis" tabindex="-1"><a class="header-anchor" href="#_1-什么是-mybatis"><span>1. 什么是 MyBatis？</span></a></h2><p>MyBatis 是一个开源的持久层框架，允许 Java 对象与数据库之间进行映射。与传统的 JDBC 相比，MyBatis 提供了更加灵活和易于管理的方式来执行 SQL 语句和处理结果集。</p><h2 id="_2-核心特性" tabindex="-1"><a class="header-anchor" href="#_2-核心特性"><span>2. 核心特性</span></a></h2><h3 id="_2-1-sql-映射" tabindex="-1"><a class="header-anchor" href="#_2-1-sql-映射"><span>2.1 SQL 映射</span></a></h3><ul><li><strong>映射 XML</strong>：MyBatis 使用 XML 文件来定义 SQL 语句，并将这些 SQL 语句映射到 Java 方法。XML 文件中包含 <code>&lt;mapper&gt;</code> 元素，其中定义了 SQL 语句和映射规则。</li><li><strong>注解方式</strong>：除了 XML 配置，MyBatis 也支持使用注解在 Java 接口中定义 SQL 语句，简化了配置过程。</li></ul><h3 id="_2-2-动态-sql" tabindex="-1"><a class="header-anchor" href="#_2-2-动态-sql"><span>2.2 动态 SQL</span></a></h3><ul><li><strong>动态 SQL 生成</strong>：MyBatis 支持根据条件动态生成 SQL 语句。这可以通过 XML 配置中的 <code>&lt;if&gt;</code>、<code>&lt;choose&gt;</code>、<code>&lt;foreach&gt;</code> 等标签实现，根据不同条件生成不同的 SQL 语句。</li></ul><h3 id="_2-3-映射关系" tabindex="-1"><a class="header-anchor" href="#_2-3-映射关系"><span>2.3 映射关系</span></a></h3><ul><li><strong>一对一</strong>：支持一对一的对象映射。例如，用户和用户详情之间的关系可以通过一对一映射来实现。</li><li><strong>一对多</strong>：支持一对多的对象映射。例如，一个部门下有多个员工，可以通过一对多映射来实现。</li><li><strong>多对多</strong>：支持多对多的对象映射。例如，学生和课程之间的多对多关系可以通过多对多映射来实现。</li></ul><h3 id="_2-4-缓存机制" tabindex="-1"><a class="header-anchor" href="#_2-4-缓存机制"><span>2.4 缓存机制</span></a></h3><ul><li><strong>一级缓存</strong>：默认启用的会话级缓存，生命周期与 SqlSession 相同。它缓存同一 SqlSession 内的查询结果，减少数据库访问次数。</li><li><strong>二级缓存</strong>：可配置的全局缓存，跨多个 SqlSession 缓存查询结果。二级缓存需要在配置文件中启用，并为每个 Mapper 文件配置。</li></ul><h2 id="_3-主要组件" tabindex="-1"><a class="header-anchor" href="#_3-主要组件"><span>3. 主要组件</span></a></h2><h3 id="_3-1-sqlsessionfactory" tabindex="-1"><a class="header-anchor" href="#_3-1-sqlsessionfactory"><span>3.1 SqlSessionFactory</span></a></h3><ul><li><strong>作用</strong>：创建 SqlSession 的工厂，负责配置和管理数据库连接。通常通过读取配置文件（如 <code>mybatis-config.xml</code>）来初始化 SqlSessionFactory。</li></ul><h3 id="_3-2-sqlsession" tabindex="-1"><a class="header-anchor" href="#_3-2-sqlsession"><span>3.2 SqlSession</span></a></h3><ul><li><strong>作用</strong>：执行 SQL 语句的主要接口，支持增、删、改、查操作。SqlSession 提供了对数据库操作的基本支持，并支持事务管理和缓存。</li></ul><h3 id="_3-3-mapper" tabindex="-1"><a class="header-anchor" href="#_3-3-mapper"><span>3.3 Mapper</span></a></h3><ul><li><strong>Mapper 接口</strong>：定义数据访问方法，通过接口与 XML 文件或注解进行映射。Mapper 接口方法通常对应 SQL 语句，简化了数据访问操作的定义。</li></ul><h3 id="_3-4-configuration" tabindex="-1"><a class="header-anchor" href="#_3-4-configuration"><span>3.4 Configuration</span></a></h3><ul><li><strong>Configuration 类</strong>：用于配置 MyBatis 的各种设置，如全局设置、数据源配置、事务管理器等。Configuration 类是 MyBatis 的核心配置类。</li></ul><h2 id="_4-配置文件" tabindex="-1"><a class="header-anchor" href="#_4-配置文件"><span>4. 配置文件</span></a></h2><h3 id="_4-1-mybatis-配置文件" tabindex="-1"><a class="header-anchor" href="#_4-1-mybatis-配置文件"><span>4.1 MyBatis 配置文件</span></a></h3><ul><li><strong><code>mybatis-config.xml</code></strong>：主配置文件，包含 MyBatis 的全局配置和插件设置。配置项包括： <ul><li>数据源配置</li><li>事务管理</li><li>缓存设置</li><li>全局设置（如驼峰命名规则）</li></ul></li></ul><h3 id="_4-2-mapper-配置文件" tabindex="-1"><a class="header-anchor" href="#_4-2-mapper-配置文件"><span>4.2 Mapper 配置文件</span></a></h3><ul><li><strong><code>Mapper.xml</code></strong>：定义 SQL 语句和映射规则。每个 Mapper 文件对应一个 Mapper 接口，包含 SQL 语句和映射配置。例如： <ul><li><code>select</code> 查询</li><li><code>insert</code>、<code>update</code>、<code>delete</code> 操作</li><li>动态 SQL 生成</li></ul></li></ul><h2 id="_5-使用-mybatis" tabindex="-1"><a class="header-anchor" href="#_5-使用-mybatis"><span>5. 使用 MyBatis</span></a></h2><h3 id="_5-1-配置数据源和-mybatis" tabindex="-1"><a class="header-anchor" href="#_5-1-配置数据源和-mybatis"><span>5.1 配置数据源和 MyBatis</span></a></h3><ul><li><strong>数据源配置</strong>：在 <code>mybatis-config.xml</code> 文件中配置数据源。MyBatis 支持多种数据源，如 HikariCP 和 Druid。</li></ul><h3 id="_5-2-创建-mapper-接口和-xml-文件" tabindex="-1"><a class="header-anchor" href="#_5-2-创建-mapper-接口和-xml-文件"><span>5.2 创建 Mapper 接口和 XML 文件</span></a></h3><ul><li><strong>Mapper 接口</strong>：定义数据访问方法。例如，定义一个获取用户信息的方法。</li><li><strong>Mapper XML 文件</strong>：提供 SQL 语句和映射规则。例如，定义获取用户信息的 SQL 查询语句。</li></ul><h3 id="_5-3-执行操作" tabindex="-1"><a class="header-anchor" href="#_5-3-执行操作"><span>5.3 执行操作</span></a></h3><ul><li><strong>获取 SqlSessionFactory</strong>：通过配置文件创建 SqlSessionFactory 实例。</li><li><strong>获取 SqlSession</strong>：通过 SqlSessionFactory 创建 SqlSession 实例。</li><li><strong>执行 SQL 操作</strong>：使用 SqlSession 执行 CRUD 操作，如查询、插入、更新和删除。</li></ul><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span>6. 总结</span></a></h2><p>MyBatis 提供了一个灵活和强大的机制来简化 Java 对象和数据库之间的映射。通过使用 XML 配置或注解，MyBatis 允许开发者自定义 SQL 语句，并有效管理数据访问操作。了解 MyBatis 的核心组件、特性和配置方法，将帮助你更高效地处理数据库操作。</p>',36)]))}const c=s(n,[["render",o]]),h=JSON.parse('{"path":"/notes/backend/Mybatis.html","title":"Mybatis","lang":"zh-CN","frontmatter":{"title":"Mybatis","icon":"pen-to-square","date":"2024-08-03T00:00:00.000Z","category":["后端"],"tag":["持久层框架"],"description":"MyBatis MyBatis 是一个流行的持久层框架，用于简化 Java 应用程序与数据库之间的交互。它通过提供映射 SQL 语句到 Java 对象的功能，简化了数据访问的操作。以下是 MyBatis 的一些基础和重要知识点： 1. 什么是 MyBatis？ MyBatis 是一个开源的持久层框架，允许 Java 对象与数据库之间进行映射。与传统的 ...","head":[["meta",{"property":"og:url","content":"https://misyakuji.github.io/blog/notes/backend/Mybatis.html"}],["meta",{"property":"og:site_name","content":"夕的博客"}],["meta",{"property":"og:title","content":"Mybatis"}],["meta",{"property":"og:description","content":"MyBatis MyBatis 是一个流行的持久层框架，用于简化 Java 应用程序与数据库之间的交互。它通过提供映射 SQL 语句到 Java 对象的功能，简化了数据访问的操作。以下是 MyBatis 的一些基础和重要知识点： 1. 什么是 MyBatis？ MyBatis 是一个开源的持久层框架，允许 Java 对象与数据库之间进行映射。与传统的 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T18:51:22.000Z"}],["meta",{"property":"article:tag","content":"持久层框架"}],["meta",{"property":"article:published_time","content":"2024-08-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T18:51:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mybatis\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T18:51:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Misyakuji\\",\\"url\\":\\"https://blog.misyakuji.top\\"}]}"]]},"git":{"createdTime":1732992682000,"updatedTime":1732992682000,"contributors":[{"name":"Misyakuji","username":"Misyakuji","email":"2810013347@qq.com","commits":1,"url":"https://github.com/Misyakuji"}]},"readingTime":{"minutes":3.58,"words":1073},"filePathRelative":"notes/backend/Mybatis.md","localizedDate":"2024年8月3日","excerpt":"\\n<p>MyBatis 是一个流行的持久层框架，用于简化 Java 应用程序与数据库之间的交互。它通过提供映射 SQL 语句到 Java 对象的功能，简化了数据访问的操作。以下是 MyBatis 的一些基础和重要知识点：</p>\\n<h2>1. 什么是 MyBatis？</h2>\\n<p>MyBatis 是一个开源的持久层框架，允许 Java 对象与数据库之间进行映射。与传统的 JDBC 相比，MyBatis 提供了更加灵活和易于管理的方式来执行 SQL 语句和处理结果集。</p>\\n<h2>2. 核心特性</h2>\\n<h3>2.1 SQL 映射</h3>\\n<ul>\\n<li><strong>映射 XML</strong>：MyBatis 使用 XML 文件来定义 SQL 语句，并将这些 SQL 语句映射到 Java 方法。XML 文件中包含 <code>&lt;mapper&gt;</code> 元素，其中定义了 SQL 语句和映射规则。</li>\\n<li><strong>注解方式</strong>：除了 XML 配置，MyBatis 也支持使用注解在 Java 接口中定义 SQL 语句，简化了配置过程。</li>\\n</ul>","autoDesc":true}');export{c as comp,h as data};
